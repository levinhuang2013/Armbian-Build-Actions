#!/bin/bash

# 设置字体颜色
STEPS="[\033[95m 步骤 \033[0m]"      # 步骤
INFO="[\033[94m 信息 \033[0m]"       # 信息
SUCCESS="[\033[92m 成功 \033[0m]"    # 成功
OPTIONS="[\033[93m 选项 \033[0m]"    # 选项
ERROR="[\033[91m 错误 \033[0m]"      # 错误
VERSION="[\033[96m 版本 \033[0m]"    # 版本

# 获取固件信息
release_file="/etc/armbian-release"

# 错误处理
error() {
    echo -e "${ERROR} ${1}"
    exit 1
}

# 提取固件信息中的内核类型
LINUXFAMILY=$(grep "^LINUXFAMILY=" $release_file | cut -d'=' -f2) || error "未能成功获取内核类型，请检查 /etc/armbian-release 文件。"
[[ -z "$LINUXFAMILY" ]] && error "内核类型为空，请检查 /etc/armbian-release 文件。"

# 显示用法
usage() {
    echo -e "${INFO} 使用方法: [-k] [-l] [-h]"
    echo -e "${INFO} 参数说明:"
    echo -e "${INFO}   -k <version>  指定要安装的内核版本，格式为 x.y.z"
    echo -e "${INFO}   -l            显示仓库内核版本列表（前五）"
    echo -e "${INFO}   -h            显示此帮助信息"
    exit 0
}

# 验证版本号格式
validate_version_format() {
    [[ "${1}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || error "版本号格式不正确：'${1}'，请使用 x.y.z 的格式，例如 6.6.66"
    return 0
}

# 获取仓库最新内核版本
get_latest_version() {
    CURRENT_MAJOR_MINOR=$(echo "$CURRENT_KERNEL" | grep -oP '^[0-9]+\.[0-9]+')
    versions=$(curl -fsSL --retry 3 --retry-delay 3 "https://github.com/Zane-E/Armbian-Actions/releases/expanded_assets/Armbian-Kernel") || error "无法访问 GITHUB，检查网络连接。"
    filtered_versions=$(echo "$versions" | grep -oP '>kernel-\K[0-9]+\.[0-9]+\.[0-9]+-('"${LINUXFAMILY}"')\.tar\.gz<' | grep "${CURRENT_MAJOR_MINOR}")
    [[ -z "$filtered_versions" ]] && error "未找到与当前内核版本相同系列的内核。"
    echo "$filtered_versions" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1
}

# 列出同系列内核版本
list_all_versions() {
    versions=$(curl -fsSL --retry 3 --retry-delay 3 "https://github.com/Zane-E/Armbian-Actions/releases/expanded_assets/Armbian-Kernel") || error "无法访问 GITHUB，检查网络连接。"
    filtered_versions=$(echo "$versions" | grep -oP '>kernel-\K[0-9]+\.[0-9]+\.[0-9]+-('"${LINUXFAMILY}"')\.tar\.gz<')
    [[ -z "$filtered_versions" ]] && error "未找到相同系列的内核版本。"
    all_versions=$(echo "$filtered_versions" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | sort -Vr)
    [[ -z "$all_versions" ]] && error "无法列出同系列内核版本。"
    columns=()
    for version_prefix in 6.1 6.6 6.11 6.12 6.13; do
        column=$(echo "$all_versions" | grep "^${version_prefix}\." | head -n 5)
        [[ -n "$column" ]] && columns+=("$column")
    done
    max_width=0
    for column in "${columns[@]}"; do
        for version in $column; do
            (( ${#version} > max_width )) && max_width=${#version}
        done
    done
    max_lines=0
    for column in "${columns[@]}"; do
        num_lines=$(wc -l <<< "$column")
        (( num_lines > max_lines )) && max_lines=$num_lines
    done
    for i in $(seq 1 "$max_lines"); do
        printf "${VERSION}"
        for column in "${columns[@]}"; do
            version=$(sed -n "${i}p" <<< "$column")
            printf " \033[92m%-${max_width}s\033[0m" "${version:-}"
        done
        echo
    done
}

# 安装包
install_package() {
    local pkg="${1}"
    DEB_FILE=$(ls ${pkg}*.deb 2>/dev/null)
    [[ -z "$DEB_FILE" ]] && error "未找到 [ \033[92m${pkg}*.deb\033[0m ] 文件。"
    dpkg -i "$DEB_FILE" >/dev/null 2>&1 || {
        echo -e "${ERROR} 安装失败！"
        echo -e "${STEPS} 正在修复依赖..."
        apt-get update >/dev/null 2>&1 && apt-get -f install -y >/dev/null 2>&1 || error "修复依赖失败，请检查相关依赖和文件是否存在。"
        echo -e "${SUCCESS} 依赖修复成功！"
        echo -e "${STEPS} 重新安装: [ \033[92m$pkg\033[0m ]"
        dpkg -i "$DEB_FILE" >/dev/null 2>&1 || error "重新安装 [ \033[92m$pkg\033[0m ] 失败！"
    }
}

OPTERR=0
while getopts "k:lh" opt; do
    case $opt in
        k) validate_version_format "$OPTARG" || exit 1; KERNEL_VERSION="$OPTARG" ;;
        l) SHOW_VERSIONS=true ;;
        h) usage ;;
        *) usage ;;
    esac
done

# 选择 -l 参数，则显示所有同系列内核版本并退出
[[ "$SHOW_VERSIONS" == true ]] && { list_all_versions; exit 0; }

# 显示当前内核版本
CURRENT_KERNEL=$(uname -r | cut -d'-' -f1)
echo -e "${INFO} 当前内核版本: [ \033[92m$CURRENT_KERNEL\033[0m ]"

# 获取/处理内核版本
if [[ -z "$KERNEL_VERSION" ]]; then
    LATEST_VERSION=$(get_latest_version) || error "无法获取最新的 Linux 内核版本。"
    [[ -z "$LATEST_VERSION" || ! "$LATEST_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && error "获取到的最新版本号格式错误：$LATEST_VERSION。"
    echo -e "${INFO} 最新内核版本: [ \033[92m$LATEST_VERSION\033[0m ]"
    [[ "$CURRENT_KERNEL" == "$LATEST_VERSION" ]] && { echo -e "${INFO} 您的系统已是最新内核版本。"; exit 0; }
    if [[ "$(printf '%s\n' "$CURRENT_KERNEL" "$LATEST_VERSION" | sort -V | head -n1)" == "$CURRENT_KERNEL" ]]; then
        read -p "$(echo -e "${OPTIONS} 检测到新版本，是否更新？[Y/n]: ")" UPDATE_CHOICE
        [[ ! "${UPDATE_CHOICE:-y}" =~ ^[Yy]$ ]] && { echo -e "${INFO} 您选择不更新。"; exit 0; }
        KERNEL_VERSION="$LATEST_VERSION"
        echo -e "${INFO} 您选择更新到最新版本: [ \033[92m$KERNEL_VERSION\033[0m ]"
    fi
else
    echo -e "${INFO} 指定内核版本: [ \033[92m$KERNEL_VERSION\033[0m ]"
fi

# 确认内核类型
echo -e "${INFO} 系统内核类型: [ \033[92m${LINUXFAMILY}\033[0m ]"

# 选择是否使用代理下载
read -p "$(echo -e "${OPTIONS} 是否使用代理下载？[y/N]: ")" USE_PROXY
USE_PROXY=${USE_PROXY:-n}

# 设置代理链接
[[ "$USE_PROXY" =~ ^[Yy]$ ]] && PROXY_URL="https://github.moeyy.xyz/" || PROXY_URL=""

# 创建临时目录
TEMP_DIR=$(mktemp -d)
echo -e "${STEPS} 创建临时目录: [ \033[92m$TEMP_DIR\033[0m ]"

# 生成下载链接
DOWNLOAD_URL="${PROXY_URL}https://github.com/Zane-E/Armbian-Actions/releases/download/Armbian-Kernel/kernel-${KERNEL_VERSION}-${LINUXFAMILY}.tar.gz"
echo -e "${STEPS} 开始下载文件: [ \033[92m${KERNEL_VERSION}-${LINUXFAMILY}.tar.gz\033[0m ]"

# 下载文件
cd "$TEMP_DIR" || exit
wget -q -O "${KERNEL_VERSION}-${LINUXFAMILY}.tar.gz" "$DOWNLOAD_URL" || error "下载失败，请检查版本号或网络连接。"
echo -e "${SUCCESS} 下载完成！"

# 解压下载的文件
tar -xzf "${KERNEL_VERSION}-${LINUXFAMILY}.tar.gz" || error "解压失败，请检查压缩文件。"
echo -e "${SUCCESS} 解压完成！"

# 安装文件
for pkg in linux-libc-dev linux-headers linux-image linux-dtb; do
    echo -e "${STEPS} 正在安装: [ \033[92m$pkg\033[0m ]"
    install_package "$pkg" || exit 1
done
echo -e "${SUCCESS} 所有文件已安装！"

# 返回原始目录并删除临时目录
cd - > /dev/null 2>&1
rm -rf "$TEMP_DIR"
echo -e "${SUCCESS} 临时目录已删除！"

# 提示是否重启
read -p "$(echo -e "${OPTIONS} 是否立即重启系统？[Y/n]: ")" REBOOT_CHOICE
REBOOT_CHOICE=${REBOOT_CHOICE:-y}
if [[ "$REBOOT_CHOICE" =~ ^[Yy]$ ]]; then
    # echo -e "${INFO} 系统将在 5 秒后重启，按 Ctrl+C 取消重启。"
    for ((i=5; i>=0; i--)); do
        echo -ne "${STEPS} 倒计时: [ "
        for ((j=5; j>i; j--)); do echo -ne "\e[31m=\e[0m"; done
        for ((j=i; j>0; j--)); do echo -ne "\e[32m-\e[0m"; done
        echo -ne " ]\r"
        sleep 1
    done
    echo ""
    echo -e "${INFO} 重启中..."
    reboot
else
    echo -e "${INFO} 请手动重启系统以使更改生效。"
fi
