name: Build Armbian
  
on:  
  workflow_dispatch:  
    inputs:  
      BOARD:  
        description: 'Board type'  
        required: true 
        default: 'nanopct4'
        type: choice
        options:
          - 'nanopct4'
          - 'rock-5c'
      BRANCH:  
        description: 'Armbian branch'  
        default: 'edge'  
        required: true 
        type: choice 
        options:
          - 'current'
          - 'edge'
          - 'vendor'
      RELEASE:  
        description: 'Release name' 
        default: 'bookworm'
        required: true  
        type: choice
        options:
          - 'bookworm'
          - 'trixie'
          - 'jammy'
          - 'noble'
      Version:
        description: 'Armbian Version'
        default: 'main'
        required: true 
        type: choice
        options: 
          - 'main' 
          - 'v24.08'
      BUILD_DESKTOP:  
        description: 'Build desktop environment'  
        default: 'no'  
        required: false  
        type: choice
        options:
          - 'yes'
          - 'no'
      BUILD_MINIMAL:  
        description: 'BUILD MINIMAL environment'  
        default: 'yes'  
        required: false  
        type: choice
        options:
          - 'yes'
          - 'no'
      PREFER_DOCKER:
        description: 'Use Docker build'
        default: 'no'
        required: false
        type: choice
        options:
          - 'yes'
          - 'no'
      DOCKER_ARMBIAN_BASE_IMAGE:
        description: 'Docker IMAGE'
        default: 'ubuntu:jammy'
        required: false
        type: choice
        options:
          - 'ubuntu:jammy'
          - 'ubuntu:noble'
          - 'debian:bookworm'

env:
  TZ: Asia/Shanghai
  
jobs:  
  build-armbian:  
    runs-on: ubuntu-24.04  
    steps:  
      - name: Checkout  
        uses: actions/checkout@v4  
          
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker_images_ids=$(docker images -q)
          if [ -n "$docker_images_ids" ]; then
            docker rmi $docker_images_ids
          fi
          docker image prune -a -f
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "${TZ}"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          df -Th
  
      - name: Download source code
        working-directory: /mnt/workdir
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=${{ github.event.inputs.Version }} https://github.com/armbian/build.git build 
          ln -sf /mnt/workdir/build $GITHUB_WORKSPACE/build

          cd build/
          rm -f patch/kernel/archive/rockchip64-6.11/rk3399-fix-pci-phy.patch
          rm -f patch/kernel/archive/rockchip64-6.6/rk3399-fix-pci-phy.patch
          cp -f ${{ github.workspace }}/patch/T4/nanopct4.csc config/boards/
          cp -f ${{ github.workspace }}/patch/T4/kernel-debs.sh lib/functions/compilation/
          cp -f ${{ github.workspace }}/patch/T4/kernel-make.sh lib/functions/compilation/
          cp -f ${{ github.workspace }}/patch/T4/general-fix-Kodi-sysinfo-CPU-information.patch patch/kernel/archive/rockchip64-6.11/
          cp -f ${{ github.workspace }}/patch/T4/general-fix-Kodi-sysinfo-CPU-information.patch patch/kernel/archive/rockchip64-6.6/
          cp -f ${{ github.workspace }}/patch/T4/rk3399-t4-1.8-2.2.patch patch/kernel/archive/rockchip64-6.11/
          cp -f ${{ github.workspace }}/patch/T4/rk3399-t4-1.8-2.2.patch patch/kernel/archive/rockchip64-6.6/
          cp -f ${{ github.workspace }}/patch/T4/linux-rockchip64-edge.config config/kernel/
          cp -f ${{ github.workspace }}/patch/T4/rockchip64_common.inc config/sources/families/include/
          ls -la
  
      - name: Compile Armbian [ ${{ github.event.inputs.BOARD }} ${{ github.event.inputs.RELEASE }} ] 
        run: |  
          cd /mnt/workdir/build/  
          ./compile.sh build BOARD=${{ inputs.BOARD }} BRANCH=${{ inputs.BRANCH }} RELEASE=${{ inputs.RELEASE }} BUILD_MINIMAL=${{ inputs.BUILD_MINIMAL }} BUILD_DESKTOP=${{ inputs.BUILD_DESKTOP }} \
            PREFER_DOCKER=${{ inputs.PREFER_DOCKER }} DOCKER_ARMBIAN_BASE_IMAGE=${{ inputs.DOCKER_ARMBIAN_BASE_IMAGE }} COMPRESS_OUTPUTIMAGE=xz KERNEL_CONFIGURE=no DEB_COMPRESS=xz
          
      - name: Set current year and month  
        run: |  
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV  

      - name: Prepare Release Metadata
        run: |   
          latest_image=$(ls ${{ github.workspace }}/build/output/images/Armbian-unofficial_*.img.xz 2>/dev/null | sort -V | tail -n 1)
          
          if [ -z "$latest_image" ]; then
            echo "No image files found."
            exit 1
          fi
          
          version=$(echo "$latest_image" | cut -d'_' -f2)    
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "Extracted VERSION: $version"
        
      - name: Upload image to Release  
        if: success() 
        uses: ncipollo/release-action@main
        with:  
          tag: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          name: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          artifacts: "${{ github.workspace }}/build/output/images/*"
          allowUpdates: true
          removeArtifacts: false 
          replacesArtifacts: true 
          token: ${{ secrets.GH_TOKEN }}  
          body: |  
            ### Armbian Image Information  
            - Release: ${{ github.event.inputs.RELEASE }}    
            - Version: ${{ env.VERSION }}     
          draft: false  
          prerelease: false 
